/*
# first 1000 digits of "A Million Random Digits with 100,000 Normal Deviates"
# convert to binary by doing odd/even

a = "1009..."
binary_list=[]
for digit in a:
    binary_list.append (1 if int(digit) % 2 else 0)

y=0
byte_out=0
for x in range(0,len(binary_list)//8):
    print(-1 if binary_list[(x*8)+7] else 1,end=",")
    print(-1 if binary_list[(x*8)+6] else 1,end=",")
    print(-1 if binary_list[(x*8)+5] else 1,end=",")
    print(-1 if binary_list[(x*8)+4] else 1,end=",")
    print(-1 if binary_list[(x*8)+3] else 1,end=",")
    print(-1 if binary_list[(x*8)+2] else 1,end=",")
    print(-1 if binary_list[(x*8)+1] else 1,end=",")
    print(-1 if binary_list[(x*8)+0] else 1)
*/
double scramble_code[] = { -1,1,-1,-1,-1,1,1,-1,
-1,1,1,-1,1,-1,-1,-1,
-1,1,1,-1,1,1,-1,-1,
1,1,1,-1,1,1,-1,-1,
-1,-1,-1,-1,1,-1,-1,-1,
-1,1,-1,1,-1,1,-1,-1,
1,1,1,-1,-1,-1,-1,1,
-1,1,1,1,-1,1,1,1,
1,1,1,-1,1,1,-1,1,
-1,-1,1,1,1,-1,1,1,
1,1,-1,1,-1,1,1,1,
-1,1,1,1,1,1,1,1,
1,1,1,1,-1,1,1,-1,
-1,-1,-1,-1,-1,1,1,1,
-1,1,-1,-1,1,-1,1,1,
-1,1,1,-1,1,1,-1,1,
-1,-1,-1,-1,-1,-1,1,1,
1,1,-1,-1,1,1,-1,1,
-1,-1,1,1,1,-1,-1,1,
-1,1,-1,1,1,-1,-1,1,
-1,1,-1,1,-1,-1,-1,1,
-1,-1,-1,-1,1,-1,-1,-1,
-1,1,1,1,-1,1,-1,-1,
1,1,-1,-1,-1,1,-1,1,
-1,-1,1,-1,1,1,-1,1,
-1,-1,-1,-1,1,1,1,-1,
-1,-1,-1,-1,1,1,1,-1,
-1,1,1,1,-1,1,-1,1,
1,-1,-1,-1,1,1,-1,1,
-1,-1,1,1,-1,-1,-1,-1,
1,1,-1,-1,-1,-1,1,-1,
-1,-1,1,1,1,1,-1,-1,
-1,1,1,-1,-1,-1,-1,1,
1,-1,1,-1,1,1,-1,1,
1,-1,-1,1,-1,-1,-1,1,
1,-1,-1,-1,-1,1,-1,1,
1,-1,-1,-1,-1,-1,-1,1,
1,1,-1,-1,1,-1,-1,-1,
-1,1,-1,1,1,1,-1,1,
1,1,1,1,1,-1,-1,-1,
1,1,1,-1,1,-1,-1,-1,
1,-1,-1,-1,1,1,1,-1,
1,1,-1,1,-1,-1,1,-1,
-1,1,1,-1,-1,-1,1,-1,
1,1,1,-1,-1,-1,1,1,
1,-1,1,-1,-1,1,1,1,
-1,-1,1,1,1,1,1,-1,
-1,1,-1,-1,1,-1,1,1,
1,-1,-1,1,1,-1,1,-1,
-1,-1,-1,1,1,-1,1,1,
-1,1,-1,-1,-1,-1,-1,1,
1,-1,1,-1,-1,1,-1,-1,
-1,-1,1,-1,1,1,1,-1,
1,1,1,1,-1,-1,-1,-1,
-1,1,-1,1,1,1,1,1,
1,-1,1,-1,-1,1,-1,1,
1,1,-1,-1,-1,-1,1,1,
1,-1,-1,1,-1,-1,-1,-1,
-1,-1,1,-1,-1,1,1,-1,
1,1,1,1,-1,1,1,1,
-1,1,1,-1,-1,-1,1,1,
1,-1,-1,1,-1,-1,1,1,
1,-1,1,-1,-1,-1,1,1,
1,-1,-1,1,-1,-1,-1,1,
-1,1,1,1,1,-1,1,-1,
-1,1,1,-1,1,-1,1,1,
-1,1,-1,-1,1,1,1,-1,
1,-1,1,-1,-1,-1,1,-1,
-1,-1,1,-1,-1,-1,-1,1,
-1,-1,1,-1,1,-1,1,1,
-1,-1,1,1,1,1,-1,-1,
1,-1,1,-1,1,-1,1,-1,
1,1,-1,1,1,1,1,1,
1,-1,-1,1,1,1,1,-1,
-1,-1,1,-1,1,-1,-1,-1,
1,-1,-1,1,-1,1,-1,1,
-1,1,1,1,1,1,1,-1,
1,-1,-1,-1,-1,1,1,1,
1,-1,1,-1,1,1,-1,1,
1,-1,1,1,1,-1,-1,1,
1,-1,-1,-1,-1,-1,1,1,
1,-1,1,1,1,1,-1,-1,
1,-1,1,1,1,1,1,1,
1,-1,-1,1,1,1,-1,-1,
-1,-1,-1,-1,1,1,1,-1,
1,1,-1,1,1,-1,1,-1,
-1,-1,1,1,-1,1,-1,-1,
-1,-1,-1,-1,1,1,1,-1,
-1,1,1,1,-1,-1,1,1,
-1,1,-1,1,1,-1,-1,-1,
-1,1,1,1,1,1,-1,-1,
1,-1,1,-1,-1,-1,1,1,
-1,1,-1,1,1,1,-1,-1,
-1,1,-1,-1,-1,1,-1,1,
1,-1,1,-1,-1,-1,1,1,
-1,1,-1,1,1,1,-1,-1,
-1,-1,1,1,1,-1,1,-1,
-1,1,-1,-1,1,-1,-1,1,
1,1,1,1,-1,-1,-1,-1,
1,1,-1,1,-1,1,-1,1,
1,-1,-1,1,1,-1,1,1,
1,-1,1,-1,-1,-1,-1,-1,
-1,-1,-1,1,-1,-1,1,1,
-1,1,1,-1,-1,1,1,1,
-1,-1,1,1,-1,-1,-1,-1,
-1,-1,-1,-1,1,-1,1,-1,
-1,1,-1,-1,1,-1,-1,1,
1,1,-1,-1,-1,-1,1,-1,
-1,1,1,-1,1,-1,-1,1,
1,-1,1,1,1,1,-1,1,
1,1,1,-1,1,-1,-1,1,
1,1,1,1,1,-1,-1,-1,
-1,-1,-1,1,-1,-1,1,1,
1,1,-1,1,1,1,1,1,
1,1,-1,-1,1,1,-1,1,
1,-1,1,1,-1,-1,1,-1,
-1,-1,1,1,1,-1,-1,1,
1,1,1,-1,1,-1,-1,-1,
-1,1,1,-1,1,1,-1,1,
-1,1,-1,1,1,-1,-1,1,
-1,1,1,-1,1,1,1,-1,
-1,-1,1,1,1,1,1,-1,
-1,1,1,-1,1,1,-1,1,
1,-1,1,1,1,1,-1,-1,
1,-1,-1,1,-1,1,1,-1 };